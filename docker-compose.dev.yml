# This docker-compose file sets up the dev environment.
# It builds an app container based on Dockerfile.chemotion.dev
#
# USAGE:
# - Run app server: docker-compose -f docker-compose.dev.yml up
# - Initial dev setup without external seeds: docker-compose -f docker-compose.dev.yml run app bundle exec rake db:setup
# - Open shell within container (for rake tasks etc): docker-compose -f docker-compose.dev.yml run app /bin/bash
# - Run unit tests: docker-compose -f docker-compose.dev.yml run app bundle exec rspec --exclude-pattern spec/{features}/**/*_spec.rb
# - Run feature tests: docker-compose -f docker-compose.dev.yml run app bundle exec rspec spec/features
# - Run JS tests: docker-compose -f docker-compose.dev.yml run app npm test
# Note: all these commands can be run manually from the shell. This might be the better choice as docker creates an overlay FS for every run
#


version: '3'

services:
  postgres:
    image: 'postgres:latest'
    environment:
      - 'POSTGRES_HOST_AUTH_METHOD=trust'
    expose: # expose port to app container
      - '5432'
    ports: # expose port to host machine in case we want to use external db gui tools
      - '5432:5432'
    volumes:
      - 'database:/var/lib/postgresql'

  app:
    build:
      context: '.'
      dockerfile: 'Dockerfile.chemotion-dev'
    depends_on:
      - 'postgres'
    ports: # expose default rails port to host machine
      - "3000:3000"
    volumes:
      - 'homedir:/home/chemotion-dev/' # houses the installed gems via asdf
      - '.:/home/chemotion-dev/app'
    working_dir: "/home/chemotion-dev/app"
    command: "bundle exec rails s -p 3000 -b 0.0.0.0"

volumes:
  database:
  homedir:
